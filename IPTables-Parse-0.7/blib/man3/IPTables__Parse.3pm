.\" Automatically generated by Pod::Man 2.22 (Pod::Simple 3.07)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.ie \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.el \{\
.    de IX
..
.\}
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "IPTables::Parse 3pm"
.TH IPTables::Parse 3pm "2010-10-09" "perl v5.10.1" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
IPTables::Parse \- Perl extension for parsing iptables firewall rulesets
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\&  use IPTables::Parse;
\&
\&  my %opts = (
\&      \*(Aqiptables\*(Aq => \*(Aq/sbin/iptables\*(Aq,
\&      \*(Aqiptout\*(Aq   => \*(Aq/tmp/iptables.out\*(Aq,
\&      \*(Aqipterr\*(Aq   => \*(Aq/tmp/iptables.err\*(Aq,
\&      \*(Aqdebug\*(Aq    => 0,
\&      \*(Aqverbose\*(Aq  => 0
\&  );
\&
\&  my $ipt_obj = new IPTables::Parse(%opts)
\&      or die "[*] Could not acquire IPTables::Parse object";
\&
\&  my $rv = 0;
\&
\&  my $table = \*(Aqfilter\*(Aq;
\&  my $chain = \*(AqINPUT\*(Aq;
\&
\&  my ($ipt_hr, $rv) = $ipt_obj\->default_drop($table, $chain);
\&  if ($rv) {
\&      if (defined $ipt_hr\->{\*(Aqall\*(Aq}) {
\&          print "The INPUT chain has a default DROP rule for all protocols.\en";
\&      } else {
\&          for my $proto qw/tcp udp icmp/ {
\&              if (defined $ipt_hr\->{$proto}) {
\&                  print "The INPUT chain drops $proto by default.\en";
\&              }
\&          }
\&      }
\&  } else {
\&      print "[\-] Could not parse iptables policy\en";
\&  }
\&
\&  ($ipt_hr, $rv) = $ipt_obj\->default_log($table, $chain);
\&  if ($rv) {
\&      if (defined $ipt_hr\->{\*(Aqall\*(Aq}) {
\&          print "The INPUT chain has a default LOG rule for all protocols.\en";
\&      } else {
\&          for my $proto qw/tcp udp icmp/ {
\&              if (defined $ipt_hr\->{$proto}) {
\&                  print "The INPUT chain logs $proto by default.\en";
\&              }
\&          }
\&      }
\&  } else {
\&      print "[\-] Could not parse iptables policy\en";
\&  }
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
The \f(CW\*(C`IPTables::Parse\*(C'\fR package provides an interface to parse iptables
rules on Linux systems through the direct execution of iptables commands, or
from parsing a file that contains an iptables policy listing.  You can get the
current policy applied to a table/chain, look for a specific user-defined chain,
check for a default \s-1DROP\s0 policy, or determing whether or not logging rules exist.
.SH "FUNCTIONS"
.IX Header "FUNCTIONS"
The IPTables::Parse extension provides an object interface to the following
functions:
.ie n .IP "chain_policy($table, $chain)" 4
.el .IP "chain_policy($table, \f(CW$chain\fR)" 4
.IX Item "chain_policy($table, $chain)"
This function returns the policy (e.g. '\s-1DROP\s0', '\s-1ACCEPT\s0', etc.) for the specified
table and chain:
.Sp
.Vb 1
\&  print "INPUT policy: ", $ipt_obj\->chain_policy(\*(Aqfilter\*(Aq, \*(AqINPUT\*(Aq), "\en";
.Ve
.ie n .IP "chain_rules($table, $chain)" 4
.el .IP "chain_rules($table, \f(CW$chain\fR)" 4
.IX Item "chain_rules($table, $chain)"
This function parses the specified chain and table and returns an array reference
for all rules in the chain.  Each element in the array reference is a hash with
the following keys (that contain values depending on the rule): \f(CW\*(C`src\*(C'\fR, \f(CW\*(C`dst\*(C'\fR,
\&\f(CW\*(C`protocol\*(C'\fR, \f(CW\*(C`s_port\*(C'\fR, \f(CW\*(C`d_port\*(C'\fR, \f(CW\*(C`target\*(C'\fR, \f(CW\*(C`packets\*(C'\fR, \f(CW\*(C`bytes\*(C'\fR, \f(CW\*(C`intf_in\*(C'\fR,
\&\f(CW\*(C`intf_out\*(C'\fR, \f(CW\*(C`to_ip\*(C'\fR, \f(CW\*(C`to_port\*(C'\fR, \f(CW\*(C`state\*(C'\fR, \f(CW\*(C`raw\*(C'\fR, and \f(CW\*(C`extended\*(C'\fR.  The \f(CW\*(C`extended\*(C'\fR
element contains the rule output past the protocol information, and the \f(CW\*(C`raw\*(C'\fR
element contains the complete rule itself as reported by iptables.
.ie n .IP "default_drop($table, $chain)" 4
.el .IP "default_drop($table, \f(CW$chain\fR)" 4
.IX Item "default_drop($table, $chain)"
This function parses the running iptables policy in order to determine if
the specified chain contains a default \s-1DROP\s0 rule.  Two values are returned,
a hash reference whose keys are the protocols that are dropped by default
if a global \s-1ACCEPT\s0 rule has not accepted matching packets first, along with
a return value that tells the caller if parsing the iptables policy was
successful.  Note that if all protocols are dropped by default, then the
hash key 'all' will be defined.
.Sp
.Vb 1
\&  ($ipt_hr, $rv) = $ipt_obj\->default_drop(\*(Aqfilter\*(Aq, \*(AqINPUT\*(Aq);
.Ve
.ie n .IP "default_log($table, $chain)" 4
.el .IP "default_log($table, \f(CW$chain\fR)" 4
.IX Item "default_log($table, $chain)"
This function parses the running iptables policy in order to determine if
the specified chain contains a default \s-1LOG\s0 rule.  Two values are returned,
a hash reference whose keys are the protocols that are logged by default
if a global \s-1ACCEPT\s0 rule has not accepted matching packets first, along with
a return value that tells the caller if parsing the iptables policy was
successful.  Note that if all protocols are logged by default, then the
hash key 'all' will be defined.  An example invocation is:
.Sp
.Vb 1
\&  ($ipt_hr, $rv) = $ipt_obj\->default_log(\*(Aqfilter\*(Aq, \*(AqINPUT\*(Aq);
.Ve
.SH "AUTHOR"
.IX Header "AUTHOR"
Michael Rash, <mbr@cipherdyne.org>
.SH "SEE ALSO"
.IX Header "SEE ALSO"
The IPTables::Parse is used by the IPTables::ChainMgr extension in support of
the psad, fwsnort, and fwknop projects to parse iptables policies (see the \fIpsad\fR\|(8),
\&\fIfwsnort\fR\|(8), and \fIfwknop\fR\|(8) man pages).  As always, the \fIiptables\fR\|(8) provides the
best information on command line execution and theory behind iptables.
.PP
Although there is no mailing that is devoted specifically to the IPTables::Parse
extension, questions about the extension will be answered on the following
lists:
.PP
.Vb 3
\&  The psad mailing list: http://lists.sourceforge.net/lists/listinfo/psad\-discuss
\&  The fwknop mailing list: http://lists.sourceforge.net/lists/listinfo/fwknop\-discuss
\&  The fwsnort mailing list: http://lists.sourceforge.net/lists/listinfo/fwsnort\-discuss
.Ve
.PP
The latest version of the IPTables::Parse extension can be found at:
.PP
http://www.cipherdyne.org/modules/
.SH "CREDITS"
.IX Header "CREDITS"
Thanks to the following people:
.PP
.Vb 2
\&  Franck Joncourt <franck.mail@dthconnex.com>
\&  Grant Ferley
.Ve
.SH "AUTHOR"
.IX Header "AUTHOR"
The IPTables::Parse extension was written by Michael Rash \fI<mbr@cipherdyne.org>\fR
to support the psad, fwknop, and fwsnort projects.  Please send email to
this address if there are any questions, comments, or bug reports.
.SH "COPYRIGHT AND LICENSE"
.IX Header "COPYRIGHT AND LICENSE"
Copyright (C) 2005\-2008 by Michael Rash
.PP
This library is free software; you can redistribute it and/or modify
it under the same terms as Perl itself, either Perl version 5.8.5 or,
at your option, any later version of Perl 5 you may have available.
